name: Enforce Issue-Linked PRs

on:
  pull_request_target:
    types: [opened, reopened, edited, synchronize]

permissions:
  pull-requests: write
  issues: read

jobs:
  check-issue-link:
    runs-on: ubuntu-latest
    name: Check PR has linked issue
    steps:
      - name: Verify PR has linked issue in Development section
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const repo = context.repo;

            console.log(`Checking PR #${prNumber} for linked issues in Development section`);

            // Check for exempt users
            const exemptUsers = ['A1L13N', 'copilot-swe-agent[bot]'];
            if (exemptUsers.includes(pr.user.login)) {
              console.log(`PR author ${pr.user.login} is exempt from issue link requirement`);
              return;
            }

            // Check for exempt labels
            const exemptLabels = ['dependencies', 'documentation', 'typo', 'ci', 'chore'];
            const hasExemptLabel = pr.labels?.some(label => exemptLabels.includes(label.name.toLowerCase()));
            if (hasExemptLabel) {
              console.log(`PR has exempt label, skipping issue link check`);
              return;
            }

            // Check for exempt title prefixes
            const exemptPrefixes = ['docs:', 'chore:', 'deps:', 'ci:'];
            if (exemptPrefixes.some(prefix => pr.title.toLowerCase().startsWith(prefix))) {
              console.log(`PR has exempt prefix in title, skipping issue link check`);
              return;
            }

            // Check linked issues in the Development section using GraphQL
            try {
              const query = `
                query($owner:String!, $repo:String!, $pr_number:Int!) {
                  repository(owner:$owner, name:$repo) {
                    pullRequest(number:$pr_number) {
                      closingIssuesReferences(first:10) {
                        nodes {
                          number
                          title
                          state
                        }
                      }
                    }
                  }
                }
              `;

              const variables = {
                owner: repo.owner,
                repo: repo.repo,
                pr_number: prNumber
              };

              const result = await github.graphql(query, variables);
              const linkedIssues = result.repository.pullRequest.closingIssuesReferences.nodes;

              if (linkedIssues && linkedIssues.length > 0) {
                const openIssues = linkedIssues.filter(issue => issue.state === 'OPEN');

                if (openIssues.length > 0) {
                  console.log(`Found ${openIssues.length} open issue(s) linked via Development section:`);
                  for (const issue of openIssues) {
                    console.log(`- #${issue.number}: ${issue.title}`);
                  }
                  return;
                } else {
                  console.log(`All linked issues are closed. PRs must link to an open issue.`);
                }
              } else {
                console.log(`No issues linked via the Development section`);
              }
            } catch (error) {
              console.log(`GraphQL error when checking linked issues: ${error.message}`);
            }

            // If no valid open issues are linked via Development section, comment and close
            const { data: comments } = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
            });

            const botUserName = 'github-actions[bot]';
            const previousComment = comments.find(comment =>
              comment.user.login === botUserName &&
              comment.body.includes('ðŸš¨ Missing Open Issue Link')
            );

            if (!previousComment) {
              const message = `
              ## ðŸš¨ Missing Open Issue Link

              This pull request does not reference any **open GitHub issue via the Development section**.

              PRs must be linked to an open issue using GitHubâ€™s "Development" section (on the right sidebar).

              **How to fix this:**
              - Go to the PR page.
              - Use the "Link issue" option in the Development section.
              - Select an appropriate open issue.

              This PR will be automatically closed. You can reopen it after linking an open issue.

              Thank you!
              `;

              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: prNumber,
                body: message
              });

              console.log(`Commented on PR #${prNumber} about missing Development section link`);
            } else {
              console.log(`Already commented about missing link, skipping duplicate comment`);
            }

            await github.rest.pulls.update({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber,
              state: 'closed'
            });

            console.log(`Closed PR #${prNumber} due to missing Development section link`);
